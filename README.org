* Time Blocking Script
A Python script to streamline time blocking. It takes a user's schedule in text form, interprets each line as an event, and converts it into an .ics file for easy import into any calendar application.

** Development
Code created by ChatGPT 4:

https://chat.openai.com/share/f7432fc0-989d-4448-b2ca-6651cf2c5406

https://chat.openai.com/share/e81b8a11-e881-438e-96b6-ba350d979fff

** Purpose
Time blocking is a time management technique that involves dividing your day into blocks of time, each dedicated to accomplishing a specific task or set of tasks. This technique is based on the premise that we can be more efficient and productive if we focus on one task at a time, rather than multi-tasking or constantly switching between tasks.

In practice, time blocking involves planning your day in advance, usually by listing all of the tasks you need to complete and then assigning a specific time slot for each task. For example, you might block off 9 am - 11 am for writing a report, 11 am - 12 pm for responding to emails, 1 pm - 2 pm for a meeting, and so on.

Time blocking can help you manage your time more efficiently, reduce distractions and interruptions, and ensure that high-priority tasks get the attention they deserve. It also provides a clear structure for your day, which can reduce stress and decision fatigue.

Time blocking is different from time boxing.

Time blocking and time boxing are both time management techniques, and while they have some similarities, they differ in key ways:

1. **Time Blocking:** This method involves scheduling specific tasks to be done within certain periods (or blocks) of time throughout your day. For instance, you might schedule 8:00 AM - 10:00 AM for writing, 10:00 AM - 11:00 AM for responding to emails, etc. The focus here is more on the tasks to be accomplished during each block of time, and these blocks can be adjusted based on the nature and duration of each task.

2. **Time Boxing:** This technique involves allotting a fixed amount of time, or a "box" of time, to each task, after which you move on to the next task whether the current task is completed or not. For example, you could decide to dedicate exactly one hour to brainstorming ideas for a project, after which you would move on to the next task, regardless of whether you've finished brainstorming or not. The primary goal of time boxing is to prevent tasks from dragging on and consuming more time than they should.

Time blocking is about organizing your day into blocks of time dedicated to certain tasks, whereas time boxing is about limiting the amount of time you spend on any given task.

** Features
- Takes schedule input either from the clipboard or directly from the console.
- Parses the schedule to extract the start times, durations, and titles of tasks.
- Handles variations in the input format, like the absence of "am/pm" or the presence of a space before "am/pm".
- Creates a calendar of events based on the schedule.
- Displays the proposed schedule in a readable format with color-coded elements, and neatly aligns the event titles.
- Asks for confirmation before saving the schedule to an .ics file.
- Opens the .ics file automatically after it's been created.

** Installation
To install and run the script, follow these steps:

1. Clone the repository:
  git clone <repository_url>

2. Navigate to the repository directory:
  cd <repository_directory>

3. Ensure you have the required Python libraries. You can install them with pip:
  pip install pyperclip ics python-dateutil termcolor

4. Run the script:
  python time_blocking.py

** Usage
Run the script and paste your schedule when prompted, or copy your schedule to the clipboard before running the script.

The schedule should be in the following format:

#+BEGIN_EXAMPLE
6:30pm work on book 30 minutes
7pm go to gym
8:30 pm meditate
9pm shower
9:30pm meet Jenny
10:00 comedy show
11 get a drink
11:30 pm go home
#+END_EXAMPLE

Or this format:

#+BEGIN_EXAMPLE
5:00pm - Work on book for 90 minutes
6:30pm - Meditate for 30 minutes
7:00pm - Cook for 1 hour
8:00pm - Take a shower
8:30pm - Clean apartment
10:00pm - Prepare for comedy show
10:30pm - Attend comedy show
12:00am - Reflect on day, plan tomorrow
#+END_EXAMPLE


Each line represents a single event. The event's start time should be first, followed by the event's title. If you want to specify the event's duration, add it at the end of the line in the format "X minutes", where X is the duration in minutes. If no duration is specified for an event, the script assumes the event ends 10 minutes before the start of the next event, or at the next hour if it's the last event.

The script assumes all events take place today, before midnight.

After pasting your schedule, hit RETURN twice to signal the end of input. The script will display the proposed schedule and ask for your confirmation. If you confirm, it will save the schedule to an .ics file and open it.
